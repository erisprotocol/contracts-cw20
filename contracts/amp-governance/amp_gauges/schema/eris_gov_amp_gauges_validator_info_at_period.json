{"$schema":"http://json-schema.org/draft-07/schema#","title":"VotedValidatorInfoResponse","description":"This structure describes the response used to return voting information for a specific pool (generator).","type":"object","required":["fixed_amount","slope","voting_power"],"properties":{"fixed_amount":{"description":"fixed amount available","allOf":[{"$ref":"#/definitions/Uint128"}]},"slope":{"description":"The slope at which the amount of vAMP that voted for this validator will decay","allOf":[{"$ref":"#/definitions/Uint128"}]},"voting_power":{"description":"Dynamic voting power that voted for this validator","allOf":[{"$ref":"#/definitions/Uint128"}]}},"additionalProperties":false,"definitions":{"Uint128":{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string"}}}