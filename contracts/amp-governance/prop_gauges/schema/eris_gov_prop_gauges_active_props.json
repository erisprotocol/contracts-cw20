{"$schema":"http://json-schema.org/draft-07/schema#","title":"PropsResponse","type":"object","required":["props"],"properties":{"props":{"type":"array","items":{"type":"array","items":[{"type":"integer","format":"uint64","minimum":0},{"$ref":"#/definitions/PropInfo"}],"maxItems":2,"minItems":2}}},"additionalProperties":false,"definitions":{"PropInfo":{"type":"object","required":["abstain_vp","end_time_s","no_vp","nwv_vp","period","yes_vp"],"properties":{"abstain_vp":{"$ref":"#/definitions/Uint128"},"current_vote":{"anyOf":[{"$ref":"#/definitions/VoteOption"},{"type":"null"}]},"end_time_s":{"type":"integer","format":"uint64","minimum":0},"no_vp":{"$ref":"#/definitions/Uint128"},"nwv_vp":{"$ref":"#/definitions/Uint128"},"period":{"type":"integer","format":"uint64","minimum":0},"total_vp":{"default":"0","allOf":[{"$ref":"#/definitions/Uint128"}]},"yes_vp":{"$ref":"#/definitions/Uint128"}},"additionalProperties":false},"Uint128":{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string"},"VoteOption":{"type":"string","enum":["yes","no","abstain","no_with_veto"]}}}