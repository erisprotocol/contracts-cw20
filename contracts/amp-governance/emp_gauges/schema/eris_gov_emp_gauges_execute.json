{"$schema":"http://json-schema.org/draft-07/schema#","title":"ExecuteMsg","description":"This structure describes the execute messages available in the contract.","oneOf":[{"description":"Vote allows a vxASTRO holder to cast votes on which generators should get ASTRO emissions in the next epoch","type":"object","required":["add_emps"],"properties":{"add_emps":{"type":"object","required":["emps"],"properties":{"emps":{"type":"array","items":{"type":"array","items":[{"type":"string"},{"type":"array","items":{"$ref":"#/definitions/EmpInfo"}}],"maxItems":2,"minItems":2}}},"additionalProperties":false}},"additionalProperties":false},{"type":"object","required":["tune_emps"],"properties":{"tune_emps":{"type":"object","additionalProperties":false}},"additionalProperties":false},{"type":"object","required":["update_config"],"properties":{"update_config":{"type":"object","properties":{"validators_limit":{"type":["integer","null"],"format":"uint64","minimum":0}},"additionalProperties":false}},"additionalProperties":false},{"description":"ProposeNewOwner proposes a new owner for the contract","type":"object","required":["propose_new_owner"],"properties":{"propose_new_owner":{"type":"object","required":["expires_in","new_owner"],"properties":{"expires_in":{"description":"The timestamp when the contract ownership change expires","type":"integer","format":"uint64","minimum":0},"new_owner":{"description":"Newly proposed contract owner","type":"string"}},"additionalProperties":false}},"additionalProperties":false},{"description":"DropOwnershipProposal removes the latest contract ownership transfer proposal","type":"object","required":["drop_ownership_proposal"],"properties":{"drop_ownership_proposal":{"type":"object","additionalProperties":false}},"additionalProperties":false},{"description":"ClaimOwnership allows the newly proposed owner to claim contract ownership","type":"object","required":["claim_ownership"],"properties":{"claim_ownership":{"type":"object","additionalProperties":false}},"additionalProperties":false}],"definitions":{"EmpInfo":{"type":"object","required":["umerit_points"],"properties":{"decaying_period":{"type":["integer","null"],"format":"uint64","minimum":0},"umerit_points":{"$ref":"#/definitions/Uint128"}},"additionalProperties":false},"Uint128":{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string"}}}